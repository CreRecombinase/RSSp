// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// evd_dnorm
double evd_dnorm(const Eigen::Map<Eigen::ArrayXd> par, const Eigen::Map<Eigen::ArrayXd> dvec, const Eigen::Map<Eigen::ArrayXd> quh);
RcppExport SEXP _RSSp_evd_dnorm(SEXP parSEXP, SEXP dvecSEXP, SEXP quhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type dvec(dvecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type quh(quhSEXP);
    rcpp_result_gen = Rcpp::wrap(evd_dnorm(par, dvec, quh));
    return rcpp_result_gen;
END_RCPP
}
// evd_dnorm_grad
Eigen::ArrayXd evd_dnorm_grad(const Eigen::Map<Eigen::ArrayXd> par, const Eigen::Map<Eigen::ArrayXd> dvec, const Eigen::Map<Eigen::ArrayXd> quh);
RcppExport SEXP _RSSp_evd_dnorm_grad(SEXP parSEXP, SEXP dvecSEXP, SEXP quhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type dvec(dvecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type quh(quhSEXP);
    rcpp_result_gen = Rcpp::wrap(evd_dnorm_grad(par, dvec, quh));
    return rcpp_result_gen;
END_RCPP
}
// evd_dnorm_step
Eigen::ArrayXd evd_dnorm_step(const Eigen::Map<Eigen::ArrayXd> par, const Eigen::Map<Eigen::ArrayXd> dvec, const Eigen::Map<Eigen::ArrayXd> quh, const double step_size);
RcppExport SEXP _RSSp_evd_dnorm_step(SEXP parSEXP, SEXP dvecSEXP, SEXP quhSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type dvec(dvecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type quh(quhSEXP);
    Rcpp::traits::input_parameter< const double >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(evd_dnorm_step(par, dvec, quh, step_size));
    return rcpp_result_gen;
END_RCPP
}
// evd_dnorm_grad_stan
Eigen::ArrayXd evd_dnorm_grad_stan(const Eigen::Map<Eigen::ArrayXd> par, const Eigen::Map<Eigen::ArrayXd> dvec, const Eigen::Map<Eigen::ArrayXd> quh);
RcppExport SEXP _RSSp_evd_dnorm_grad_stan(SEXP parSEXP, SEXP dvecSEXP, SEXP quhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type dvec(dvecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type quh(quhSEXP);
    rcpp_result_gen = Rcpp::wrap(evd_dnorm_grad_stan(par, dvec, quh));
    return rcpp_result_gen;
END_RCPP
}
// simuh_dir_cpp
Eigen::MatrixXd simuh_dir_cpp(double sigu, double bias, int nreps, Eigen::MatrixXd& Q, Eigen::ArrayXd& D, Rcpp::StringVector fgeneids, Eigen::MatrixXd usim);
RcppExport SEXP _RSSp_simuh_dir_cpp(SEXP siguSEXP, SEXP biasSEXP, SEXP nrepsSEXP, SEXP QSEXP, SEXP DSEXP, SEXP fgeneidsSEXP, SEXP usimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigu(siguSEXP);
    Rcpp::traits::input_parameter< double >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< int >::type nreps(nrepsSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type fgeneids(fgeneidsSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type usim(usimSEXP);
    rcpp_result_gen = Rcpp::wrap(simuh_dir_cpp(sigu, bias, nreps, Q, D, fgeneids, usim));
    return rcpp_result_gen;
END_RCPP
}
// block_mat_mul
Rcpp::NumericMatrix block_mat_mul(Rcpp::ListOf<Rcpp::NumericMatrix>& mat_l, Rcpp::NumericMatrix& ymat, bool transpose_mat_l);
RcppExport SEXP _RSSp_block_mat_mul(SEXP mat_lSEXP, SEXP ymatSEXP, SEXP transpose_mat_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::ListOf<Rcpp::NumericMatrix>& >::type mat_l(mat_lSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose_mat_l(transpose_mat_lSEXP);
    rcpp_result_gen = Rcpp::wrap(block_mat_mul(mat_l, ymat, transpose_mat_l));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP _RSSp_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_outerproduct
Eigen::MatrixXd rcppeigen_outerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _RSSp_rcppeigen_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_innerproduct
double rcppeigen_innerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _RSSp_rcppeigen_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP _RSSp_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RSSp_evd_dnorm", (DL_FUNC) &_RSSp_evd_dnorm, 3},
    {"_RSSp_evd_dnorm_grad", (DL_FUNC) &_RSSp_evd_dnorm_grad, 3},
    {"_RSSp_evd_dnorm_step", (DL_FUNC) &_RSSp_evd_dnorm_step, 4},
    {"_RSSp_evd_dnorm_grad_stan", (DL_FUNC) &_RSSp_evd_dnorm_grad_stan, 3},
    {"_RSSp_simuh_dir_cpp", (DL_FUNC) &_RSSp_simuh_dir_cpp, 7},
    {"_RSSp_block_mat_mul", (DL_FUNC) &_RSSp_block_mat_mul, 3},
    {"_RSSp_rcppeigen_hello_world", (DL_FUNC) &_RSSp_rcppeigen_hello_world, 0},
    {"_RSSp_rcppeigen_outerproduct", (DL_FUNC) &_RSSp_rcppeigen_outerproduct, 1},
    {"_RSSp_rcppeigen_innerproduct", (DL_FUNC) &_RSSp_rcppeigen_innerproduct, 1},
    {"_RSSp_rcppeigen_bothproducts", (DL_FUNC) &_RSSp_rcppeigen_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RSSp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
